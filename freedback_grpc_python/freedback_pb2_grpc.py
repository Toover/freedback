# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import freedback_pb2 as freedback__pb2


class ReceiverStub(object):
  """Service with an endpoint to receive freedback entries.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.submit = channel.unary_unary(
        '/freedback.Receiver/submit',
        request_serializer=freedback__pb2.Entry.SerializeToString,
        response_deserializer=freedback__pb2.EntryAccess.FromString,
        )
    self.delete = channel.unary_unary(
        '/freedback.Receiver/delete',
        request_serializer=freedback__pb2.EntryAccess.SerializeToString,
        response_deserializer=freedback__pb2.Empty.FromString,
        )


class ReceiverServicer(object):
  """Service with an endpoint to receive freedback entries.
  """

  def submit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def delete(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ReceiverServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'submit': grpc.unary_unary_rpc_method_handler(
          servicer.submit,
          request_deserializer=freedback__pb2.Entry.FromString,
          response_serializer=freedback__pb2.EntryAccess.SerializeToString,
      ),
      'delete': grpc.unary_unary_rpc_method_handler(
          servicer.delete,
          request_deserializer=freedback__pb2.EntryAccess.FromString,
          response_serializer=freedback__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'freedback.Receiver', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
